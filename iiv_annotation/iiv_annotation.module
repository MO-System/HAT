<?
//commonly used strings
$text_content_type = 'Content-Type: text/plain; charset: utf-8';

/**
 * Implementation of hook_menu().
 */
function iiv_annotation_menu() {
  $items['islandora/annotation/insert/%/%/%/%'] = array(
    'page callback' => 'iiv_annotation_insert',
    'page arguments' => array(3,4,5,6),
    'access arguments' => array('add annotations'), 
    'type' => MENU_CALLBACK,
  );
  
  $items['islandora/annotation/delete/%/%'] = array(
  	'page callback' => 'iiv_annotation_delete',
    'page arguments' => array(3,4),
    'access arguments' => array('add annotations'),
    'type' => MENU_CALLBACK,
  );
 
  $items['islandora/annotation/select/%'] = array(
  	'page callback' => 'iiv_annotation_select',
    'page arguments' => array(3),
    'access arguments' => array('view annotations'),
    'type' => MENU_CALLBACK,
  );

  $items['islandora/annotation/flag/%'] = array(
  	'page callback' => 'iiv_annotation_flag',
    'page arguments' => array(3),
    'access arguments' => array('flag annotations'),
    'file' => 'inc/iiv_annotation_flagging.inc',
    'type' => MENU_CALLBACK,
  );

  $items['islandora/annotation/unflag/%'] = array(
  	'page callback' => 'iiv_annotation_unflag',
    'page arguments' => array(3),
    'access arguments' => array('flag annotations'),
    'file' => 'inc/iiv_annotation_flagging.inc',
    'type' => MENU_CALLBACK,
  );

  $items['islandora/annotation/clearflags/%'] = array(
  	'page callback' => 'iiv_annotation_clearflags',
    'page arguments' => array(3),
    'access arguments' => array('administer annotations'),
    'file' => 'inc/iiv_annotation_flagging.inc',
    'type' => MENU_CALLBACK,
  );

  $items['admin/settings/iiv_annotation_flag'] = array(
      'title' => 'IIV Annotation Flag Admin',
      'description' => 'Managing Annotations flag',
      'page callback' => 'iiv_annotation_flag_admin',
      'access arguments' => array('administer annotations'),
      'type' => MENU_NORMAL_ITEM,
  );
  
  $items['islandora/annotation/highlight/%/%'] = array(
    'page callback' => 'iiv_annotation_highlight',
    'page arguments' => array(3,4),
    'access arguments' => array('access content'), 
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implementation of hook_perm().
 */
function iiv_annotation_perm(){
  return array('view annotations', 'administer annotations', 'add annotations', 
               'remove own annotation', 'flag annotations');
}

/**
*Implementation of hook_theme()
*/
function iiv_annotation_theme(){
  $path = drupal_get_path('module', 'iiv_annotation');
  return array(
    'iiv_annotation_flag_admin' => array(
      'template' => 'iiv_annotation_flag_admin',
      'path' => $path
    )
  );
}

/*
Return: prints to output
Description: Tells Drupal to theme output using iiv_annotation_admin theme definition
*/

function iiv_annotation_flag_admin(){
  //load the flag include file
  module_load_include('inc', 'iiv_annotation', 'inc/iiv_annotation_flagging');
  return theme('iiv_annotation_flag_admin') . drupal_get_form('iiv_annotation_flag_settings_form');	
}

/*
Return: prints to output
Description: Returns annotation data for a given pid in JSON format
*/
function iiv_annotation_select($pid){
  global $user;
  $select_query = "SELECT * FROM {annotations} WHERE (public = 1 OR uid = %d) AND pid = '%s'";
  $result = db_query($select_query, $user->uid, $pid);
  
  $sanitized_results = array();
  while($row = db_fetch_array($result)){
	//sanatize the output of annotation_text, as it is user entered text
	$row['annotation_text'] = check_plain($row['annotation_text']);
	
	//convert the row to JSON and add it to the output array
    array_push($sanitized_results,$row);
  }
  
  drupal_set_header($text_content_type);//print text to client
  
  //print all output elements as list of JSON objects
  echo _iiv_annotation_get_jsonp_callback(json_encode($sanitized_results));
}

/*
Return: prints to output
Description: Inserts an annotation record
*/
function iiv_annotation_insert($pid, $text, $location, $public){
  global $user;
  $insert_query = "INSERT INTO {annotations}(pid,uid,annotation_text,annotation_location_size,public, timestamp)
                   VALUES('%s',%d,'%s','%s',%d,%d)";
  
  //check if user has permissions to add annotations
  if(user_access('add annotations')){
	$result = db_query($insert_query,$pid,$user->uid,$text,$location,$public,time());
	
	//print result to output, let the client know its plain text
	drupal_set_header($text_content_type);
	
	$message = ($result == 1 ? "success" : "error");
	
	echo _iiv_annotation_get_jsonp_callback(_iiv_annotation_json_message($message));
  } 
}

/*
Return: prints to output
Description: Deletes a given annotation
*/
function iiv_annotation_delete($aid, $op){
  $delete_query = "DELETE FROM {annotations} WHERE aid = %d";
 

  //if the user is an administrator, or if the user is deleting their own annotation
  if(user_access('administer annotations') || 
  (user_access('remove own annotation') && _iiv_annotation_user_owns_annotation($aid))){
    $result = db_query($delete_query,$aid);
    if($result){
      //load the flagging include file so we can delete all flags belonging to annotation
      module_load_include('inc', 'iiv_annotation', 'inc/iiv_annotation_flagging');
      iiv_annotation_delete_flags($aid);  
    }
  }
  //$op is specified in the request to state whether to return plain text of to navigate back to flag admin page
  if($op == 'json'){
  	drupal_set_header($text_content_type);//print text to client
    $message = ($result == 1 ? "success" : "error");
	
	echo _iiv_annotation_get_jsonp_callback(_iiv_annotation_json_message($message));
  }
  elseif($op == 'admin'){
	$result ? drupal_set_message(t('annotation has been deleted')) : drupal_set_message(t('error deleting annotation'));
	drupal_goto('admin/settings/iiv_annotation_flag');
  }
  
}

//Returns JSON data of a given query
function iiv_annotation_highlight($pid, $query){
    drupal_set_header($text_content_type);//print text to client
    $query_arr = array();
    //Decompose the query into single word, and store them in the query_arr array.
    $query_arr = explode(" ",$query);					
    //Generate the coodinates file url.
    $host = variable_get('fedora_base_url', 'http://localhost:8080/fedora');
    $coodinates_url = $host.'/objects/'.$pid.'/datastreams/WORDSXY/content';
    $xmlDoc = new DOMDocument();
    if($xmlDoc->load($coodinates_url))
    {
    	$root = $xmlDoc -> documentElement;
    	//Get each subtree of single line.
    	$element = $root->getElementsByTagName('par');
    	$result = array();
    	$global = 0;
    	foreach($element as $new)
    	{
    		$child = $new->childNodes;
    		for($i=0;$i<$child->length;$i++)
    		{
    			if(count($query_arr) == 1)
    			{
    				$OK = false;
    				if(strcasecmp($query_arr[0],$child->item($i)->firstChild->nodeValue) == 0)
    				{
    				 	$OK = true;
    				}
    				if(strcasecmp($query_arr[0].',',$child->item($i)->firstChild->nodeValue) == 0)
    				{
    					$OK = true;
    				}
    				if(strcasecmp($query_arr[0].'.',$child->item($i)->firstChild->nodeValue) == 0)
    				{
    					$OK = true;
    				}
    				if($OK)
    				{
    					$global ++;
    					watchdog('test',$global);
    					$temp = array('l'=>$child->item($i)->getAttribute('l'),'t'=>$child->item($i)->getAttribute('t'),'r'=>$child->item($i)->getAttribute('r'),'b'=>$child->item($i)->getAttribute('b'));
    						array_push($result,$temp);
    				}	
    			}
    			// find the word in the coordinate file which is the same as the first key word.
    			else if(strcasecmp($query_arr[0],$child->item($i)->firstChild->nodeValue) == 0)
    			{
    				$count = $i;
    				$j = 1;
    				$OK = true;
    				
    				//check if the order and the position of key words are the same as the words in the coordinate file.
    				while($j<count($query_arr)-1&&$OK)
    				{
    					$count += 2;
    					if($count<$child->length)
    					{
    						if(strcasecmp($query_arr[$j],$child->item($count)->firstChild->nodeValue) !=0)
    						{
    							$OK = false;
    						}
    					}
    					$j++;	
    				}
    				$j = count($query_arr)-1;
    				$count += 2;
    				if($count<$child->length)
    				{
    					if(strncasecmp($query_arr[$j],$child->item($count)->firstChild->nodeValue,strlen($query_arr[$j])-1) != 0)
    					{
    							$OK = false;
    					}
    					if(strlen($query_arr[$j])*2 < strlen($child->item($count)->firstChild->nodeValue))
    					{
    							$OK = false;
    					}					
    				}
    				
    				if($OK)
    				{
    					//generate a array with 4 coordinates for one word, and push all the arrays into single array.  
    					for($k=0;$k<count($query_arr);$k++)
    					{
    						$number = $i+2*$k;
    						$temp = array('l'=>$child->item($number)->getAttribute('l'),'t'=>$child->item($number)->getAttribute('t'),'r'=>$child->item($number)->getAttribute('r'),'b'=>$child->item($number)->getAttribute('b'));
    						array_push($result,$temp);
    				
    					}
    				}
    			}
    		}
    	
    	}
    
        echo _iiv_annotation_get_jsonp_callback(json_encode($result));
    	
    }
    else
    {
        echo _iiv_annotation_json_message("error loading document");
    }
}

/*
Return: boolean
Description: determines if the current user owns an annotation
*/
function _iiv_annotation_user_owns_annotation($aid){
  $select_query = "SELECT uid FROM {annotations} WHERE aid = %d";
  $result= db_fetch_array(db_query($select_query, $aid));

  global $user;
  return $result['uid'] == $user->uid;
}

/*
Return: string
Description: builds a JSONP JavaScript callback for cross domain ajax requests
@param $callback: callback supplied by the JSONP request
@param $data: JSON data
*/
function _iiv_annotation_get_jsonp_callback($data){
    if (!array_key_exists('callback', $_GET)){
        return _iiv_annotation_json_message("no callback");
    }
    else if(!$data){
        return _iiv_annotation_get_jsonp_callback(_iiv_annotation_json_message("empty data set"));
    }
    else{
        return $_GET['callback'] . '(' . $data . ')';
    }
}


/*
Return: string
Description: creates JSON for a given message {"message":"value"} 
*/
function _iiv_annotation_json_message($message){
    $message_arr = array('message' => $message);
    return json_encode($message_arr);
}

/**
 * Implementation of hook_rules_event_info().
 * @ingroup rules
 */
function iiv_annotation_rules_event_info() {
  return array(
    'iiv_annotation_flag' => array(
      'label' => t('An annotation is flagged'),
      'module' => 'IIV Annotations',
      'arguments' => array(
        'flagging_user' => array('type' => 'user', 'label' => t('User that flags annotation')),
      ),
    ),
  );
}









